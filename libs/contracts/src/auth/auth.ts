// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Auth";

export interface AuthSignupDto {
  userName: string;
  email: string;
  password: string;
  fullName: string;
  dob: string;
  avatar: string;
  coverImage?: string | undefined;
}

export interface AuthChangePasswordDto {
  id: string;
  oldPassword: string;
  newPassword: string;
}

export interface AuthSigninDto {
  userName: string;
  password: string;
}

export interface AuthDeleteUserCredentialsDto {
  id: string;
}

export interface AuthSignupResponse {
  id: string;
  userName: string;
  email: string;
  fullName: string;
  dob: string;
  avatar: string;
  coverImage?: string | undefined;
}

export interface AuthChangePasswordResponse {
  response: boolean;
}

export interface AuthSigninResponse {
  token: string;
}

export interface AuthDeleteUserCredentialsResponse {
  response: string;
}

export interface AuthHealthCheckRequest {
  service: string;
}

export interface AuthHealthCheckResponse {
  status: AuthHealthCheckResponse_ServingStatus;
}

export enum AuthHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export const AUTH_PACKAGE_NAME = "Auth";

export interface AuthServiceClient {
  signup(request: AuthSignupDto): Observable<AuthSignupResponse>;

  signin(request: AuthSigninDto): Observable<AuthSigninResponse>;

  changePassword(request: AuthChangePasswordDto): Observable<AuthChangePasswordResponse>;

  deleteUserCredentials(request: AuthDeleteUserCredentialsDto): Observable<AuthDeleteUserCredentialsResponse>;

  check(request: AuthHealthCheckRequest): Observable<AuthHealthCheckResponse>;
}

export interface AuthServiceController {
  signup(request: AuthSignupDto): Promise<AuthSignupResponse> | Observable<AuthSignupResponse> | AuthSignupResponse;

  signin(request: AuthSigninDto): Promise<AuthSigninResponse> | Observable<AuthSigninResponse> | AuthSigninResponse;

  changePassword(
    request: AuthChangePasswordDto,
  ): Promise<AuthChangePasswordResponse> | Observable<AuthChangePasswordResponse> | AuthChangePasswordResponse;

  deleteUserCredentials(
    request: AuthDeleteUserCredentialsDto,
  ):
    | Promise<AuthDeleteUserCredentialsResponse>
    | Observable<AuthDeleteUserCredentialsResponse>
    | AuthDeleteUserCredentialsResponse;

  check(
    request: AuthHealthCheckRequest,
  ): Promise<AuthHealthCheckResponse> | Observable<AuthHealthCheckResponse> | AuthHealthCheckResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signup", "signin", "changePassword", "deleteUserCredentials", "check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
