// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: likes.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Like";

export enum LikeTransportStatus {
  TRANSPORT_LIKE = 0,
  TRANSPORT_UNLIKE = 1,
  TRANSPORT_DISLIKE = 2,
  TRANSPORT_UNDISLIKE = 3,
  UNRECOGNIZED = -1,
}

export interface ModifyLikeStatusForVideoDto {
  userId: string;
  videoId: string;
  likeStatus: LikeTransportStatus;
}

export interface LikesFindForUserForVideoDto {
  videoId: string;
  userId: string;
}

export interface LikesFindCountForAVideoDto {
  videoId: string;
}

export interface DislikesFindCountForAVideoDto {
  videoId: string;
}

export interface LikeModifiedStatusForVideoResponse {
  response: string;
}

export interface LikeFoundForVideoResponse {
  id: string;
  userId: string;
  videoId: string;
  likeStatus: LikeTransportStatus;
}

export interface LikesFoundResponse {
  likeFoundResponse: LikeFoundForVideoResponse[];
}

export interface Empty {
}

export interface LikesHealthCheckRequest {
  service: string;
}

export interface LikesFindCountForAVideoResponse {
  likes: number;
}

export interface DislikesFindCountForAVideoResponse {
  dislikes: number;
}

export interface LikesHealthCheckResponse {
  status: LikesHealthCheckResponse_ServingStatus;
}

export enum LikesHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export const LIKE_PACKAGE_NAME = "Like";

export interface LikeServiceClient {
  modifyLikeStatusForVideo(request: ModifyLikeStatusForVideoDto): Observable<LikeModifiedStatusForVideoResponse>;

  getLikesCountForVideo(request: LikesFindCountForAVideoDto): Observable<LikesFindCountForAVideoResponse>;

  getDislikesCountForVideo(request: DislikesFindCountForAVideoDto): Observable<DislikesFindCountForAVideoResponse>;

  findLikeOfUserForAVideo(request: LikesFindForUserForVideoDto): Observable<LikeFoundForVideoResponse>;

  check(request: LikesHealthCheckRequest): Observable<LikesHealthCheckResponse>;
}

export interface LikeServiceController {
  modifyLikeStatusForVideo(
    request: ModifyLikeStatusForVideoDto,
  ):
    | Promise<LikeModifiedStatusForVideoResponse>
    | Observable<LikeModifiedStatusForVideoResponse>
    | LikeModifiedStatusForVideoResponse;

  getLikesCountForVideo(
    request: LikesFindCountForAVideoDto,
  ):
    | Promise<LikesFindCountForAVideoResponse>
    | Observable<LikesFindCountForAVideoResponse>
    | LikesFindCountForAVideoResponse;

  getDislikesCountForVideo(
    request: DislikesFindCountForAVideoDto,
  ):
    | Promise<DislikesFindCountForAVideoResponse>
    | Observable<DislikesFindCountForAVideoResponse>
    | DislikesFindCountForAVideoResponse;

  findLikeOfUserForAVideo(
    request: LikesFindForUserForVideoDto,
  ): Promise<LikeFoundForVideoResponse> | Observable<LikeFoundForVideoResponse> | LikeFoundForVideoResponse;

  check(
    request: LikesHealthCheckRequest,
  ): Promise<LikesHealthCheckResponse> | Observable<LikesHealthCheckResponse> | LikesHealthCheckResponse;
}

export function LikeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "modifyLikeStatusForVideo",
      "getLikesCountForVideo",
      "getDislikesCountForVideo",
      "findLikeOfUserForAVideo",
      "check",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LikeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LikeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LIKE_SERVICE_NAME = "LikeService";
