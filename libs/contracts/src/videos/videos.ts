// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: videos.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Video";

export enum VideoTransportPublishStatus {
  TRANSPORT_PENDING = 0,
  TRANSPORT_PROCESSING = 1,
  TRANSPORT_PROCESSED = 2,
  TRANSPORT_PUBLISHED = 3,
  TRANSPORT_FAILED = 4,
  UNRECOGNIZED = -1,
}

export enum VideoTransportVisibilityStatus {
  TRANSPORT_PRIVATE = 0,
  TRANSPORT_PUBLIC = 1,
  TRANSPORT_UNLISTED = 2,
  UNRECOGNIZED = -1,
}

export interface VideoCreateDto {
  ownerId: string;
  title: string;
  videoFileUrl: string;
  description?: string | undefined;
  videoPublishStatus: VideoTransportPublishStatus;
  videoVisibilityStatus: VideoTransportVisibilityStatus;
}

export interface VideoFindDto {
  id: string;
}

export interface VideoUpdateDto {
  id: string;
  title?: string | undefined;
  videoFileUrl?: string | undefined;
  description?: string | undefined;
  videoPublishStatus?: VideoTransportPublishStatus | undefined;
  videoVisibilityStatus?: VideoTransportVisibilityStatus | undefined;
}

export interface VideoPublishedResponse {
  response: string;
  videoId: string;
}

export interface VideoFoundResponse {
  id: string;
  title: string;
  videoFileUrl: string;
  description?: string | undefined;
  videoPublishStatus: VideoTransportPublishStatus;
  videoVisibilityStatus: VideoTransportVisibilityStatus;
}

export interface VideosFoundResponse {
  videoFindDto: VideoFindDto[];
}

export interface VideoUpdatedResponse {
  response: string;
  videoId: string;
}

export interface Empty {
}

export interface VideosHealthCheckRequest {
  service: string;
}

export interface VideosHealthCheckResponse {
  status: VideosHealthCheckResponse_ServingStatus;
}

export enum VideosHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export const VIDEO_PACKAGE_NAME = "Video";

export interface VideoServiceClient {
  create(request: VideoCreateDto): Observable<VideoPublishedResponse>;

  findOne(request: VideoFindDto): Observable<VideoFoundResponse>;

  findAll(request: Empty): Observable<VideosFoundResponse>;

  update(request: VideoUpdateDto): Observable<VideoUpdatedResponse>;

  check(request: VideosHealthCheckRequest): Observable<VideosHealthCheckResponse>;
}

export interface VideoServiceController {
  create(
    request: VideoCreateDto,
  ): Promise<VideoPublishedResponse> | Observable<VideoPublishedResponse> | VideoPublishedResponse;

  findOne(request: VideoFindDto): Promise<VideoFoundResponse> | Observable<VideoFoundResponse> | VideoFoundResponse;

  findAll(request: Empty): Promise<VideosFoundResponse> | Observable<VideosFoundResponse> | VideosFoundResponse;

  update(
    request: VideoUpdateDto,
  ): Promise<VideoUpdatedResponse> | Observable<VideoUpdatedResponse> | VideoUpdatedResponse;

  check(
    request: VideosHealthCheckRequest,
  ): Promise<VideosHealthCheckResponse> | Observable<VideosHealthCheckResponse> | VideosHealthCheckResponse;
}

export function VideoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findOne", "findAll", "update", "check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VideoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VideoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VIDEO_SERVICE_NAME = "VideoService";
