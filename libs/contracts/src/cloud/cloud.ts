// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: cloud.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Cloud";

export interface FileChunk {
  data: Uint8Array;
  size: number;
  isLast: boolean;
}

export interface GetPresignedUrlDto {
  fileName: string;
  mimeType: string;
  dir: string;
}

export interface DownloadFileAsStreamDto {
  key: string;
}

export interface CloudPreSignedUrlResponse {
  url?: string | undefined;
  key?: string | undefined;
}

export interface UploadFileDto {
  fileStream: FileChunk | undefined;
  fileKey: string;
}

export interface StreamFileToCloudResponse {
  upload: boolean;
}

export const CLOUD_PACKAGE_NAME = "Cloud";

export interface CloudServiceClient {
  getPresignedUrl(request: GetPresignedUrlDto): Observable<CloudPreSignedUrlResponse>;

  downloadFileAsStream(request: DownloadFileAsStreamDto): Observable<FileChunk>;

  uploadFile(request: Observable<UploadFileDto>): Observable<StreamFileToCloudResponse>;
}

export interface CloudServiceController {
  getPresignedUrl(
    request: GetPresignedUrlDto,
  ): Promise<CloudPreSignedUrlResponse> | Observable<CloudPreSignedUrlResponse> | CloudPreSignedUrlResponse;

  downloadFileAsStream(request: DownloadFileAsStreamDto): Observable<FileChunk>;

  uploadFile(
    request: Observable<UploadFileDto>,
  ): Promise<StreamFileToCloudResponse> | Observable<StreamFileToCloudResponse> | StreamFileToCloudResponse;
}

export function CloudServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPresignedUrl", "downloadFileAsStream"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CloudService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["uploadFile"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CloudService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CLOUD_SERVICE_NAME = "CloudService";
