// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: cloud.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Cloud";

export interface FileChunk {
  /** the actual stream data bits */
  data: Uint8Array;
  size: number;
  isLast: boolean;
}

export interface CloudPresignedUrlDto {
  fileName: string;
  mimeType: string;
  dir: string;
}

export interface CloudHealthCheckRequest {
  service: string;
}

export interface GetFileAsNodeJSReadableStreamObservableDto {
  key: string;
}

export interface CloudPreSignedUrlResponse {
  url?: string | undefined;
  key?: string | undefined;
}

export interface CloudHealthCheckResponse {
  status: CloudHealthCheckResponse_ServingStatus;
}

export enum CloudHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export interface StreamFileToCloudDto {
  fileStream: FileChunk | undefined;
  fileKey: string;
  contentType: string;
}

export interface StreamFileToCloudResponse {
  upload: boolean;
}

export const CLOUD_PACKAGE_NAME = "Cloud";

export interface CloudServiceClient {
  getPresignedUrl(request: CloudPresignedUrlDto): Observable<CloudPreSignedUrlResponse>;

  getFileAsNodeJsReadableStreamObservable(request: GetFileAsNodeJSReadableStreamObservableDto): Observable<FileChunk>;

  check(request: CloudHealthCheckRequest): Observable<CloudHealthCheckResponse>;

  streamToCloud(request: Observable<StreamFileToCloudDto>): Observable<StreamFileToCloudResponse>;
}

export interface CloudServiceController {
  getPresignedUrl(
    request: CloudPresignedUrlDto,
  ): Promise<CloudPreSignedUrlResponse> | Observable<CloudPreSignedUrlResponse> | CloudPreSignedUrlResponse;

  getFileAsNodeJsReadableStreamObservable(request: GetFileAsNodeJSReadableStreamObservableDto): Observable<FileChunk>;

  check(
    request: CloudHealthCheckRequest,
  ): Promise<CloudHealthCheckResponse> | Observable<CloudHealthCheckResponse> | CloudHealthCheckResponse;

  streamToCloud(
    request: Observable<StreamFileToCloudDto>,
  ): Promise<StreamFileToCloudResponse> | Observable<StreamFileToCloudResponse> | StreamFileToCloudResponse;
}

export function CloudServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPresignedUrl", "getFileAsNodeJsReadableStreamObservable", "check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CloudService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["streamToCloud"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CloudService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CLOUD_SERVICE_NAME = "CloudService";
