// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: saga.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Saga";

export interface SagaSignupDto {
  userName: string;
  email: string;
  fullName: string;
  password: string;
  dob: string;
  avatar: string;
  coverImage?: string | undefined;
}

export interface SagaSignupResponse {
  response: string;
  userId: string;
}

export interface SagaHealthCheckRequest {
  service: string;
}

export interface SagaHealthCheckResponse {
  status: SagaHealthCheckResponse_ServingStatus;
}

export enum SagaHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export const SAGA_PACKAGE_NAME = "Saga";

export interface SagaServiceClient {
  userSignupFlow(request: SagaSignupDto): Observable<SagaSignupResponse>;

  check(request: SagaHealthCheckRequest): Observable<SagaHealthCheckResponse>;
}

export interface SagaServiceController {
  userSignupFlow(
    request: SagaSignupDto,
  ): Promise<SagaSignupResponse> | Observable<SagaSignupResponse> | SagaSignupResponse;

  check(
    request: SagaHealthCheckRequest,
  ): Promise<SagaHealthCheckResponse> | Observable<SagaHealthCheckResponse> | SagaHealthCheckResponse;
}

export function SagaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["userSignupFlow", "check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SagaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SagaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SAGA_SERVICE_NAME = "SagaService";
