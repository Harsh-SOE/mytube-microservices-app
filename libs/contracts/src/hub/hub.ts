// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: hub.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "Hub";

export interface HubCreateDto {
  userId: string;
  hubBio?: string | undefined;
  hubCoverImage?: string | undefined;
  isHubMonitized?: boolean | undefined;
  isHubVerified?: boolean | undefined;
}

export interface HubActivateMonitizationDto {
  id: string;
}

export interface HubFindByIdDto {
  id: string;
}

export interface HubUpdateByIdDto {
  id: string;
  hubBio?: string | undefined;
  hubCoverImage?: string | undefined;
}

export interface HubVerifyByIdDto {
  id: string;
}

export interface HubCreatedResponse {
  response: string;
  hubId: string;
}

export interface HubMonitizationActivatedResponse {
  response: string;
  isMonitized: boolean;
}

export interface HubFindByIdResponse {
  id: string;
  userId: string;
  bio?: string | undefined;
  isHubMonitized?: boolean | undefined;
  isHubVerified?: boolean | undefined;
  hubCoverImage?: string | undefined;
}

export interface HubUpdateByIdResponse {
  response: string;
}

export interface HubVerifyByIdResponse {
  response: string;
}

export const HUB_PACKAGE_NAME = "Hub";

export interface HubServiceClient {
  createHub(request: HubCreateDto): Observable<HubCreatedResponse>;

  activateMonitization(request: HubActivateMonitizationDto): Observable<HubMonitizationActivatedResponse>;

  findHubById(request: HubFindByIdDto): Observable<HubFindByIdResponse>;

  hubUpdateById(request: HubUpdateByIdDto): Observable<HubUpdateByIdResponse>;

  hubVerify(request: HubVerifyByIdDto): Observable<HubVerifyByIdResponse>;
}

export interface HubServiceController {
  createHub(request: HubCreateDto): Promise<HubCreatedResponse> | Observable<HubCreatedResponse> | HubCreatedResponse;

  activateMonitization(
    request: HubActivateMonitizationDto,
  ):
    | Promise<HubMonitizationActivatedResponse>
    | Observable<HubMonitizationActivatedResponse>
    | HubMonitizationActivatedResponse;

  findHubById(
    request: HubFindByIdDto,
  ): Promise<HubFindByIdResponse> | Observable<HubFindByIdResponse> | HubFindByIdResponse;

  hubUpdateById(
    request: HubUpdateByIdDto,
  ): Promise<HubUpdateByIdResponse> | Observable<HubUpdateByIdResponse> | HubUpdateByIdResponse;

  hubVerify(
    request: HubVerifyByIdDto,
  ): Promise<HubVerifyByIdResponse> | Observable<HubVerifyByIdResponse> | HubVerifyByIdResponse;
}

export function HubServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createHub", "activateMonitization", "findHubById", "hubUpdateById", "hubVerify"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HubService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HubService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HUB_SERVICE_NAME = "HubService";
