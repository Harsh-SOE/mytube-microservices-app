// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "User";

export enum UserTransportThemePreferences {
  LIGHT = 0,
  DARK = 1,
  SYSTEM = 2,
  UNRECOGNIZED = -1,
}

export interface UserCreateProfileDto {
  authId: string;
  email: string;
  handle: string;
}

export interface UserUpdateProfileDto {
  id: string;
  dob?: string | undefined;
  phoneNumber?: string | undefined;
}

export interface UserChangeNotificationStatusDto {
  id: string;
  notificationStatus: boolean;
}

export interface UserChangePreferredThemeDto {
  id: string;
  themePerference: UserTransportThemePreferences;
}

export interface UserChangePreferredLanguageDto {
  id: string;
  language: string;
}

export interface UserVerifyPhoneNumberDto {
  id: string;
  phoneNumber: string;
}

export interface UserFindByIdDto {
  id: string;
}

export interface UserFindByAuthIdDto {
  authId: string;
}

export interface UserUpdateByIdDto {
  id: string;
  email?: string | undefined;
  fullName?: string | undefined;
  dob?: string | undefined;
}

export interface UserProfileCreatedResponse {
  response: string;
  userId: string;
}

export interface UserUpdateProfileResponse {
  response: string;
  userId: string;
}

export interface UserNotificationStatusChangedResponse {
  response: string;
  status: boolean;
}

export interface UserPreferredLanguageChangedResponse {
  response: string;
  language: string;
}

export interface UserPreferredThemeChangedResponse {
  response: string;
  theme: string;
}

export interface UserPhoneNumberVerifiedResponse {
  response: string;
  verified: boolean;
}

export interface UserFoundResponse {
  id: string;
  authUserId: string;
  email: string;
  handle: string;
  dob?: string | undefined;
  phoneNumber?: string | undefined;
  isPhoneNumberVerified: boolean;
  notification: boolean;
  languagePreference: string;
  themePreference: string;
  region: string;
  onBoardingComplete: boolean;
}

export interface UsersFoundResponse {
  userFoundResponse: UserFoundResponse[];
}

export interface UserProfileUpdatedResponse {
  response: string;
  userId: string;
}

export interface Empty {
}

export const USER_PACKAGE_NAME = "User";

export interface UserServiceClient {
  createProfile(request: UserCreateProfileDto): Observable<UserProfileCreatedResponse>;

  updateProfile(request: UserUpdateProfileDto): Observable<UserUpdateProfileResponse>;

  changeNotificationStatus(request: UserChangeNotificationStatusDto): Observable<UserNotificationStatusChangedResponse>;

  changePreferredLanguage(request: UserChangePreferredLanguageDto): Observable<UserPreferredLanguageChangedResponse>;

  changePreferredTheme(request: UserChangePreferredThemeDto): Observable<UserPreferredThemeChangedResponse>;

  verifyPhoneNumber(request: UserVerifyPhoneNumberDto): Observable<UserPhoneNumberVerifiedResponse>;

  findOneUserById(request: UserFindByIdDto): Observable<UserFoundResponse>;

  findAllUsers(request: Empty): Observable<UsersFoundResponse>;

  findUserByAuthId(request: UserFindByAuthIdDto): Observable<UserFoundResponse>;

  updateUserProfileById(request: UserUpdateByIdDto): Observable<UserProfileUpdatedResponse>;
}

export interface UserServiceController {
  createProfile(
    request: UserCreateProfileDto,
  ): Promise<UserProfileCreatedResponse> | Observable<UserProfileCreatedResponse> | UserProfileCreatedResponse;

  updateProfile(
    request: UserUpdateProfileDto,
  ): Promise<UserUpdateProfileResponse> | Observable<UserUpdateProfileResponse> | UserUpdateProfileResponse;

  changeNotificationStatus(
    request: UserChangeNotificationStatusDto,
  ):
    | Promise<UserNotificationStatusChangedResponse>
    | Observable<UserNotificationStatusChangedResponse>
    | UserNotificationStatusChangedResponse;

  changePreferredLanguage(
    request: UserChangePreferredLanguageDto,
  ):
    | Promise<UserPreferredLanguageChangedResponse>
    | Observable<UserPreferredLanguageChangedResponse>
    | UserPreferredLanguageChangedResponse;

  changePreferredTheme(
    request: UserChangePreferredThemeDto,
  ):
    | Promise<UserPreferredThemeChangedResponse>
    | Observable<UserPreferredThemeChangedResponse>
    | UserPreferredThemeChangedResponse;

  verifyPhoneNumber(
    request: UserVerifyPhoneNumberDto,
  ):
    | Promise<UserPhoneNumberVerifiedResponse>
    | Observable<UserPhoneNumberVerifiedResponse>
    | UserPhoneNumberVerifiedResponse;

  findOneUserById(
    request: UserFindByIdDto,
  ): Promise<UserFoundResponse> | Observable<UserFoundResponse> | UserFoundResponse;

  findAllUsers(request: Empty): Promise<UsersFoundResponse> | Observable<UsersFoundResponse> | UsersFoundResponse;

  findUserByAuthId(
    request: UserFindByAuthIdDto,
  ): Promise<UserFoundResponse> | Observable<UserFoundResponse> | UserFoundResponse;

  updateUserProfileById(
    request: UserUpdateByIdDto,
  ): Promise<UserProfileUpdatedResponse> | Observable<UserProfileUpdatedResponse> | UserProfileUpdatedResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProfile",
      "updateProfile",
      "changeNotificationStatus",
      "changePreferredLanguage",
      "changePreferredTheme",
      "verifyPhoneNumber",
      "findOneUserById",
      "findAllUsers",
      "findUserByAuthId",
      "updateUserProfileById",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
