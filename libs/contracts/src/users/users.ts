// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "User";

export interface UserSignupDto {
  id: string;
  userName?: string | undefined;
  email?: string | undefined;
  fullName?: string | undefined;
  dob?: string | undefined;
  avatar?: string | undefined;
  coverImage?: string | undefined;
}

export interface UserLoginDto {
  userName: string;
}

export interface UserFindByIdDto {
  id: string;
}

export interface UserUpdateDto {
  id: string;
  email?: string | undefined;
  fullName?: string | undefined;
  dob?: string | undefined;
}

export interface UserSignupResponse {
  response: string;
  userId: string;
}

export interface UserLoginResponse {
  id: string;
  userName: string;
  email: string;
  fullName: string;
  dob: string;
  avatar: string;
  coverImage?: string | undefined;
}

export interface UserFoundResponse {
  id: string;
  userName: string;
  email: string;
  fullName: string;
  dob: string;
  avatar: string;
  coverImage?: string | undefined;
}

export interface UsersFoundResponse {
  userFoundResponse: UserFoundResponse[];
}

export interface userUpdateProfileResponse {
  response: string;
  userId: string;
}

export interface Empty {
}

export interface UsersHealthCheckRequest {
  service: string;
}

export interface UsersHealthCheckResponse {
  status: UsersHealthCheckResponse_ServingStatus;
}

export enum UsersHealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  SERVICE_UNKNOWN = 3,
  UNRECOGNIZED = -1,
}

export const USER_PACKAGE_NAME = "User";

export interface UserServiceClient {
  userSignup(request: UserSignupDto): Observable<UserSignupResponse>;

  login(request: UserLoginDto): Observable<UserLoginResponse>;

  findAllUsers(request: Empty): Observable<UsersFoundResponse>;

  findOneUserById(request: UserFindByIdDto): Observable<UserFoundResponse>;

  updateUserProfile(request: UserUpdateDto): Observable<userUpdateProfileResponse>;

  check(request: UsersHealthCheckRequest): Observable<UsersHealthCheckResponse>;
}

export interface UserServiceController {
  userSignup(request: UserSignupDto): Promise<UserSignupResponse> | Observable<UserSignupResponse> | UserSignupResponse;

  login(request: UserLoginDto): Promise<UserLoginResponse> | Observable<UserLoginResponse> | UserLoginResponse;

  findAllUsers(request: Empty): Promise<UsersFoundResponse> | Observable<UsersFoundResponse> | UsersFoundResponse;

  findOneUserById(
    request: UserFindByIdDto,
  ): Promise<UserFoundResponse> | Observable<UserFoundResponse> | UserFoundResponse;

  updateUserProfile(
    request: UserUpdateDto,
  ): Promise<userUpdateProfileResponse> | Observable<userUpdateProfileResponse> | userUpdateProfileResponse;

  check(
    request: UsersHealthCheckRequest,
  ): Promise<UsersHealthCheckResponse> | Observable<UsersHealthCheckResponse> | UsersHealthCheckResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "userSignup",
      "login",
      "findAllUsers",
      "findOneUserById",
      "updateUserProfile",
      "check",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
