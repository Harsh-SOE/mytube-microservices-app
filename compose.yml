services:
  #-------------------------------------------------------------------------------------------------------------#
  #                                            DATABASES                                                        #
  #-------------------------------------------------------------------------------------------------------------#

  users-database:
    container_name: users-database
    image: postgres:latest
    env_file:
      - apps/users/.env
    environment:
      POSTGRES_USER: harsh
      POSTGRES_PASSWORD: harsh123
      POSTGRES_DB: users
    ports:
      - 5433:5432
    volumes:
      - users-database-volume:/var/lib/postgresql/data
    networks:
      - users-database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U harsh -d users"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: &logging
      driver: "local"
      options:
        max-size: "10m"
        max-file: "3"

  videos-database:
    container_name: videos-database
    image: postgres:latest
    env_file:
      - apps/videos/.env
    ports:
      - 5434:5432
    volumes:
      - videos-database-volume:/var/lib/postgresql/data
    networks:
      - videos-database-network
    environment:
      POSTGRES_USER: harsh
      POSTGRES_PASSWORD: harsh123
      POSTGRES_DB: videos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U harsh -d videos"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *logging

  auth-database:
    container_name: auth-database
    image: docker.io/bitnami/mongodb:8.0
    ports:
      - "27021:27017"
    volumes:
      - auth-database-volume:/bitnami/mongodb
    env_file:
      - apps/auth/.env
    environment:
      MONGODB_ROOT_USER: harsh
      MONGODB_ROOT_PASSWORD: harsh123
      MONGODB_REPLICA_SET_NAME: rs0
    networks:
      - auth-database-network
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "-u",
          "harsh",
          "-p",
          "harsh123",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *logging

  views-database:
    container_name: views-database
    image: postgres:latest
    env_file:
      - apps/views-aggregator/.env
    ports:
      - 5437:5432
    volumes:
      - views-database-volume:/var/lib/postgresql/data
    networks:
      - views-database-network
    environment:
      POSTGRES_USER: harsh
      POSTGRES_PASSWORD: harsh123
      POSTGRES_DB: views
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U harsh -d views"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *logging

  comments-database:
    container_name: comments-database
    image: postgres:latest
    env_file:
      - apps/comments-aggregator/.env
    ports:
      - 5436:5432
    volumes:
      - comments-database-volume:/var/lib/postgresql/data
    networks:
      - comments-database-network
    environment:
      POSTGRES_USER: harsh
      POSTGRES_PASSWORD: harsh123
      POSTGRES_DB: comments
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U harsh -d comments"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *logging

  #-------------------------------------------------------------------------------------------------------------#
  #                                            MESSAGE BROKER                                                   #
  #-------------------------------------------------------------------------------------------------------------#

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    networks:
      - app
      - kafka_event_emitter
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka_2.12-2.3.0/bin/kafka-topics.sh --bootstrap-server localhost:29092 --list > /dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 120s
    logging: *logging

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9999:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app
      - kafka_event_emitter
    logging: *logging

  #-------------------------------------------------------------------------------------------------------------#
  #                                          METRICS AND OBSERVABILITY                                          #
  #-------------------------------------------------------------------------------------------------------------#

  prom-server:
    container_name: prom-server
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
    networks:
      - metrics-and-logs-network
      - app
    depends_on:
      users:
        condition: service_healthy
      auth:
        condition: service_healthy
      cloud:
        condition: service_healthy
    logging: *logging

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - 5555:3000
    networks:
      - metrics-and-logs-network
      - app
    volumes:
      - grafana-storage:/var/lib/grafana
    logging: *logging

  grafana-loki:
    image: grafana/loki
    container_name: loki
    ports:
      - 3100:3100
    networks:
      - metrics-and-logs-network
      - app
    logging: *logging

  #-------------------------------------------------------------------------------------------------------------#
  #                                                 CACHE                                                       #
  #-------------------------------------------------------------------------------------------------------------#

  redis-cache:
    container_name: redis-cache
    image: redis:alpine
    ports:
      - 6379:6379
    volumes:
      - cache:/usr/src/cache/data
    networks:
      - app
    logging: *logging

  #-------------------------------------------------------------------------------------------------------------#
  #                                              AUTHORIZATION                                                  #
  #-------------------------------------------------------------------------------------------------------------#

  postgres:
    image: postgres:17
    container_name: postgres
    networks:
      - openfga
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging: *logging

  migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    container_name: migrate
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
    networks:
      - openfga
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "3"

  openfga:
    depends_on:
      migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    container_name: openfga
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - openfga
    ports:
      - "8080:8080"
      - "8081:8081"
      - "3333:3000"
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "3"

  #-------------------------------------------------------------------------------------------------------------#
  #                                              MICROSERVICES                                                  #
  #-------------------------------------------------------------------------------------------------------------#

  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
      target: production
    image: mytube-gateway:latest
    env_file:
      - apps/api-gateway/.env
    ports:
      - 3000:3000
    networks:
      - gateway-db
      - app
    depends_on:
      auth:
        condition: service_healthy
      users:
        condition: service_healthy
      cloud:
        condition: service_healthy
      saga:
        condition: service_healthy

  users:
    container_name: users
    build:
      context: .
      dockerfile: apps/users/Dockerfile
      target: production
    image: mytube-user:latest
    env_file:
      - apps/users/.env
    depends_on:
      users-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck: &grpc-healthcheck
      test: ["CMD", "grpc_health_probe", "-addr=:5000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - users-database-network
      - app

  users-migrate:
    image: mytube-user:latest
    container_name: users-database-migrate
    depends_on:
      users-database:
        condition: service_healthy
    env_file:
      - apps/users/.env
    entrypoint:
      [
        "npx",
        "prisma",
        "migrate",
        "dev",
        "--name",
        "initialize",
        "--schema",
        "apps/users/prisma/schema.prisma",
      ]
    networks:
      - users-database-network
      - app

  videos:
    container_name: videos
    build:
      context: .
      dockerfile: apps/videos/Dockerfile
      target: production
    image: mytube-video:latest
    env_file:
      - apps/videos/.env
    depends_on:
      videos-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - videos-database-network
      - app
    healthcheck: *grpc-healthcheck

  videos-migrate:
    image: mytube-video:latest
    container_name: videos-database-migrate
    depends_on:
      videos-database:
        condition: service_healthy
    env_file:
      - apps/videos/.env
    entrypoint:
      [
        "npx",
        "prisma",
        "migrate",
        "dev",
        "--name",
        "initialize",
        "--schema",
        "apps/videos/prisma/schema.prisma",
      ]
    networks:
      - videos-database-network
      - app

  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
      target: production
    container_name: auth
    image: mytube-auth:latest
    env_file:
      - apps/auth/.env
    depends_on:
      auth-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app
      - auth-database-network
    healthcheck: *grpc-healthcheck

  cloud:
    container_name: cloud
    build:
      context: .
      dockerfile: apps/cloud/Dockerfile
      target: production
    image: mytube-cloud:latest
    env_file:
      - apps/cloud/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app
    healthcheck: *grpc-healthcheck

  email:
    container_name: email
    build:
      context: .
      dockerfile: apps/email/Dockerfile
      target: production
    image: mytube-email:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    env_file:
      - apps/email/.env
    networks:
      - app

  likes:
    container_name: likes
    build:
      context: .
      dockerfile: apps/likes/Dockerfile
      target: production
    image: mytube-like:latest
    env_file:
      - apps/likes/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app
      - likes-database-network
    healthcheck: *grpc-healthcheck

  video-transcoder:
    container_name: video-transcoder
    build:
      context: .
      dockerfile: apps/video-transcoder/Dockerfile
      target: production
    image: mytube-video-transcoder:latest
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - apps/video-transcoder/.env
    volumes:
      - transcoder-volume:/home/node/transcoded-videos
    networks:
      - app

  saga:
    container_name: saga
    build:
      context: .
      dockerfile: apps/saga/Dockerfile
      target: production
    image: mytube-saga:latest
    env_file:
      - apps/saga/.env
    depends_on:
      auth:
        condition: service_healthy
      users:
        condition: service_healthy
    networks:
      - app
    healthcheck: *grpc-healthcheck

  likes-aggregator:
    container_name: likes-aggregator
    build:
      context: .
      dockerfile: apps/likes-aggregator/Dockerfile
      target: production
    image: mytube-likes-aggregator:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    env_file:
      - apps/likes-aggregator/.env
    networks:
      - app

  views:
    container_name: views
    build:
      context: .
      dockerfile: apps/views/Dockerfile
      target: production
    image: mytube-views:latest
    env_file:
      - apps/views/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app
    healthcheck: *grpc-healthcheck

  views-aggregator:
    container_name: views-aggregator
    build:
      context: .
      dockerfile: apps/views-aggregator/Dockerfile
      target: production
    image: mytube-views-aggregator:latest
    depends_on:
      kafka:
        condition: service_healthy
      views:
        condition: service_healthy
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    env_file:
      - apps/views-aggregator/.env
    networks:
      - app
      - views-database-network

  views-aggregator-migrate:
    image: mytube-views-aggregator:latest
    container_name: views-database-migrate
    depends_on:
      views-database:
        condition: service_healthy
    env_file:
      - apps/views-aggregator/.env
    entrypoint:
      [
        "npx",
        "prisma",
        "migrate",
        "dev",
        "--name",
        "initialize",
        "--schema",
        "apps/views-aggregator/prisma/schema.prisma",
      ]
    networks:
      - app
      - views-database-network

  comments-aggregator:
    container_name: comments-aggregator
    build:
      context: .
      dockerfile: apps/comments-aggregator/Dockerfile
      target: production
    image: mytube-comments-aggregator:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    env_file:
      - apps/comments-aggregator/.env
    networks:
      - app
      - comments-database-network

  comments-aggregator-migrate:
    image: mytube-comments-aggregator:latest
    container_name: comments-database-migrate
    depends_on:
      comments-database:
        condition: service_healthy
    env_file:
      - apps/comments-aggregator/.env
    entrypoint:
      [
        "npx",
        "prisma",
        "migrate",
        "dev",
        "--name",
        "initialize",
        "--schema",
        "apps/comments-aggregator/prisma/schema.prisma",
      ]
    networks:
      - app
      - comments-database-network

  comments:
    container_name: comments
    build:
      context: .
      dockerfile: apps/comments/Dockerfile
      target: production
    image: mytube-comments:latest
    env_file:
      - apps/comments/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app
    healthcheck: *grpc-healthcheck

#-------------------------------------------------------------------------------------------------------------#
#                                                  VOLUMES                                                    #
#-------------------------------------------------------------------------------------------------------------#

volumes:
  users-database-volume: {}
  videos-database-volume: {}
  likes-database-volume: {}
  auth-database-volume: {}
  views-database-volume: {}
  comments-database-volume: {}
  grafana-storage: {}
  ffmpeg-videos: {}
  transcoder-volume: {}
  cache: {}

#-------------------------------------------------------------------------------------------------------------#
#                                                 NETWORKS                                                    #
#-------------------------------------------------------------------------------------------------------------#

networks:
  users-database-network: {}
  videos-database-network: {}
  likes-database-network: {}
  auth-database-network: {}
  views-database-network: {}
  comments-database-network: {}
  openfga: {}
  app: {}
  gateway-db: {}
  metrics-and-logs-network: {}
  kafka_event_emitter: {}
